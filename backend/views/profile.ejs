<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>User Profile</title>
    <link rel="stylesheet" href="/style.css" />
  </head>
  <body>
    <header>
      <div class="header-leftside">
        <a href="/<%= username %>/" class="logo-link"></a>
        <div class="header-menu-item">
          <a href="/<%= username %>/">Perfil</a>
        </div>
        <div class="header-menu-item">
          <a href="/<%= username %>/mercados">Mercados</a>
        </div>
        <!-- <div class="header-menu-item">
          <a href="/<%= username %>/about">Sobre nosotros</a>
        </div> -->
      </div>
      <div class="header-rightside">
        <div class="header-menu-item">
          <button type="submit" id="logoutBtn" class="btn-primary">
            Cerrar Sesion
          </button>
        </div>
        <div class="header-menu-item">
          <div class="language-menu">
            <i id="langs" class="bx bx-world"></i>
            <div>
              <div class="language">Inglés</div>
              <div class="language">Españól</div>
            </div>
          </div>
          <div class="currency-menu">
            <i id="currencies" class="bx bx-coin-stack"></i>
            <div>
              <div class="currency">Inglés</div>
              <div class="currency">Españól</div>
            </div>
          </div>
        </div>
      </div>
    </header>
    <main class="profile">
      <h2 class="profile-username"></h2>
      <div class="trading-widget">
        <script
          type="text/javascript"
          src="https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js"
          async
        >
            {
            "symbols": [
              {
                "proName": "FOREXCOM:SPXUSD",
                "title": "S&P 500 Index"
              },
              {
                "proName": "FOREXCOM:NSXUSD",
                "title": "US 100 Cash CFD"
              },
              {
                "proName": "FX_IDC:EURUSD",
                "title": "EUR to USD"
              }
            ],
            "showSymbolLogo": true,
            "isTransparent": true,
            "displayMode": "adaptive",
            "colorTheme": "dark",
            "locale": "es"
          }
        </script>
      </div>
      <div class="container">
        <div class="center-container">
          <div class="statistics-container">
            <h1><%= username %></h1>
            <div class="statistics">
              <div class="statistic-group1">
                <div class="statistic0"></div>
                <div class="statistic1"></div>
                <div class="statistic2"></div>
              </div>
              <div class="statistic-group2">
                <div class="statistic3"></div>
                <div class="statistic4"></div>
                <div class="statistic5"></div>
              </div>
            </div>
            <div class="funds-container">
              <form>
                <span class="input-wrapper">
                  <button id="decrement">-</button>
                  <input
                    id="fundsQuantity"
                    type="number"
                    value="1"
                    id="quantity"
                    min="1"
                  />
                  <button id="increment">+</button>
                </span>
                <button id="fundsBtn">Generar fondos</button>
              </form>
            </div>
          </div>
          <div class="historic-container">
            <div class="historic">
              <table id="operationsTable">
                <thead>
                  <tr>
                    <th>Nombre</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                    <th>Restante</th>
                    <th>Fecha compra</th>
                  </tr>
                </thead>
                <tbody class="historic-table"></tbody>
              </table>
            </div>
          </div>
        </div>
        <div class="right-container">
          <div class="favorite-markets">
            <div class="tradingview-widget-container">
              <div class="tradingview-widget-container__widget"></div>
              <script
                type="text/javascript"
                src="https://s3.tradingview.com/external-embedding/embed-widget-timeline.js"
                async
              >
                  {
                  "feedMode": "market",
                  "market": "crypto",
                  "isTransparent": true,
                  "displayMode": "regular",
                  "width": 400,
                  "height": 550,
                  "colorTheme": "dark",
                  "locale": "es"
                }
              </script>
            </div>
          </div>
        </div>
      </div>
    </main>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        const fundsButton = document.querySelector("#fundsBtn");
        const tableBody = document.querySelector(".historic-table");
        const totalFunds = document.querySelector(".statistic0");
        const totalCurrentFunds = document.querySelector(".statistic1");
        const totalFundsGenerated = document.querySelector(".statistic2");
        const totalFundsInvested = document.querySelector(".statistic3");
        const percentageChange = document.querySelector(".statistic4");
        const totalPriceChange = document.querySelector(".statistic5");
        const formatDate = (dateString) => {
          const date = new Date(dateString);
          const day = String(date.getDate()).padStart(2, "0");
          const month = String(date.getMonth() + 1).padStart(2, "0");
          const year = date.getFullYear();
          const hours = String(date.getHours()).padStart(2, "0");
          const minutes = String(date.getMinutes()).padStart(2, "0");
          const seconds = String(date.getSeconds()).padStart(2, "0");
          return `${day}-${month}-${year}, ${hours}:${minutes}:${seconds}`;
        };
        fundsButton.addEventListener("click", async (e) => {
          e.preventDefault();
          console.log("^^");
          const userId = "<%= userId %>";
          const amount = document.querySelector("#fundsQuantity").value;
          console.log(amount);
          try {
            const response = await fetch("/wallet/generate", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ userid: userId, amount }),
            });

            const result = await response.json();
            if (response.ok) {
              Swal.fire({
                position: "top-end",
                icon: "success",
                title: "Operación realizada",
                showConfirmButton: false,
                timer: 1500,
              });
            } else {
              Swal.fire({
                position: "top-end",
                icon: "error",
                title: result.error,
                showConfirmButton: false,
                timer: 1500,
              });
            }
          } catch (error) {
            Swal.fire({
              position: "top-end",
              icon: "error",
              title: error.message,
              showConfirmButton: false,
              timer: 1500,
            });
          }
        });
        const fetchMarkets = async () => {
          try {
            const response = await fetch("/<%= username %>/statistics", {
              method: "GET",
            });
            const result = await response.json();
            console.log(result);
            const totFunds =
              parseFloat(result.currentFunds) +
              parseFloat(result.currentMarketValue);
            const curFunds =
              result.currentFunds != null ? result.currentFunds : 0;
            const totGen =
              result.generatedFunds != null ? result.generatedFunds : 0;
            console.log(result.currentFunds != result.generatedFunds);
            const totInvested =
              result.currentFunds != result.generatedFunds
                ? result.investedFunds
                : 0;
            const totPercent =
              result.percentageChange != null ? result.percentageChange : 0;
            const priChange =
              result.totalValueChange != null ? result.totalValueChange : 0;
            totalFunds.innerHTML = "Valor total: " + totFunds.toFixed(2) + "€";
            totalCurrentFunds.innerHTML = "Fondos: " + curFunds + "€";
            totalFundsGenerated.innerHTML = "Generados: " + totGen + "€";
            totalFundsInvested.innerHTML = "Invertidos: " + totInvested + "€";
            percentageChange.innerHTML = "Change: " + totPercent + "%";
            totalPriceChange.innerHTML = "Balance: " + priChange + "€";
          } catch (error) {
            console.log("Error:" + error.message);
          }
        };
        setInterval(fetchMarkets, 10000);
        fetchMarkets();
        try {
          const response = await fetch("/<%= username %>/operations", {
            method: "GET",
          });
          tableBody.innerHTML = "";
          const result = await response.json();
          if (response.ok) {
            result.forEach((operation) => {
              const row = document.createElement("tr");

              const nameCell = document.createElement("td");
              nameCell.textContent = operation.name;
              row.appendChild(nameCell);

              const priceCell = document.createElement("td");
              priceCell.textContent = operation.price;
              row.appendChild(priceCell);

              const quantityCell = document.createElement("td");
              quantityCell.textContent = operation.quantity;
              row.appendChild(quantityCell);

              const remainingQuantityCell = document.createElement("td");
              remainingQuantityCell.textContent = operation.remainingQuantity;
              row.appendChild(remainingQuantityCell);
              const dateCell = document.createElement("td");

              dateCell.textContent = formatDate(operation.createdAt);
              row.appendChild(dateCell);
              if (operation.type === "sell")
                row.classList.add("sell-operation");
              else row.classList.add("buy-operation");
              tableBody.appendChild(row);
            });
          } else {
            tableBody.innerHTML =
              "<tr><td>No se han encontrado operaciones</td><tr>";
          }
        } catch (error) {
          console.log("Error:" + error.message);
        }
      });
    </script>
    <script type="text/javascript" src="/script.js"></script>
  </body>
</html>
